
# include "inc/fdf.h"

int	ft_abs(int num)
{
	if (num < 0)
		return (-num);
	return (num);
}
int	keychain(int key, void *par)
{
	if (key == 65307 || !par)
		exit(0);
	return (0);
}
int	close_handler(void *param)
{
	t_fdf	*fdf;

	fdf = param;
	mlx_destroy_window(fdf->mlx, fdf->win);
	exit (0);
	return (0);
}
// void	derive_trig(t_pts d, t_pts o, t_img *i)
void	derive_trig(t_img *i)
{
	i->dx = ft_abs(i->tx - i->ox);
	i->dy = -ft_abs(i->ty - i->oy);
	i->err = i->dx + i->dy;
	if (i->ox < i->tx)
		i->sx = 1;
	else
		i->sx = -1;
	if (i->oy < i->ty)
		i->sy = 1;
	else
		i->sy = -1;
}
void	put_pixel(int x, int y, int c, t_img *i)
{
	char	*pix;

	if (x < 0 || x >= DEFWID || y < 0 || y >= DEFHEI)
		return ;
	pix = i->addr + (y * i->len + x * (i->bpp / 8));
	*(unsigned int *)pix = c;
}
void	draw_line(t_pts d, t_pts o, t_img *i)
{
	i->ox = (int)o.x;
	i->tx = (int)d.x;
	i->oy = (int)o.y;
	i->ty = (int)d.y;
	// int	x_abs;
	// int	y_abs;
	derive_trig(i);
	while (1)
	{
		put_pixel(i->ox, i->oy, o.c, i);
		if (i->ox == i->tx && i->oy == i->ty)
			break ;
		if (2 * i->err >= i->dy)
		{
			i->err += i->dy;
			i->ox += i->sx;
		}
		if (2 * i->err <= i->dx)
		{
			i->err += i->dx;
			i->oy += i->sy;
		}
	}
}
void	init_img(t_fdf *f, t_img *i, t_pts **p, t_pro **r)
{
	i->adr = mlx_get_data_addr(i->img, &i->bpp, &i->len, &i->endian);
	while (f->y < f->y_lim)
	{
		f->x = 0;
		while (f->x < f->x_lim)
		{
			if (f->x + 1 < f->x_lim)
				draw_line(p[f->y][f->x + 1], p[f->y][f->x], i);
			if (f->y + 1 < f->y_lim)
				draw_line(p[f->y + 1][f->x], p[f->y][f->x], i);
			f->x++;
		}
		f->y++;
	}
}
int	get_height(char *num, int end)
{
	int	i;
	char	*height;
	
	i = 0;
	height = malloc(sizeof(char) * end + 1);
	if (!height || height == NULL)
		exit (0);//TODO:integrate into exit function;
	while (i < end)
	{
		height[i] = num[i];
		i++;
	}
	height[i] = '\0';
	return(ft_atoi(height));
}
int	ft_hextoi(char n)
{
	if (n >= '0' && n <= '9')
		return (n - 48);
	else if (n >= 'A' && n <= 'F')
		return (n - 55);
	else if (n >= 'a' && n <= 'f')
		return (n - 87);
	return (-1);
}
int	extract_color(char *col, int j)
{
	int	i;
	int	hex;
	
	i = 2 + j;
	hex = 0;
	if (col[j] != ',')
		return (DEFCOL);
	while (col[i])
	{
		hex *= 16;
		hex += ft_hextoi(col[i]);
		i++;
	}
	return (hex);
}
int	get_lmn_len(char *lmn)
{
	int	i;
	
	i = 0;
	while (lmn[i])
	{
		if (lmn[i] == ',')
			return (-i);
		i++;
	}
	return (i);
}
t_pts	proj_offset(t_pts p, double x, double y, t_fdf *f)
{
	// float	fx;
	double	fx;
	// float	fy;
	double	fy;
	// float	fz;
	double	fz;

	fx = x * SCALEX;
	fy = y * SCALEY;
	fz = p.z * SCALEZ;
	p.x = ((fx - -fy) * (f->cosine));
	// p.x = ((fx - -fy) * (cosine) + f->x_off);
	p.y = ((fx + -fy) * (f->sine) - fz);
	// p.y = ((fx + -fy) * (sine) - fz + f->y_off);
	return (p);
}
t_pts	*meta_segments(t_fdf *f, int y)
{
	t_pts	*p;
	char	**s;
	int	len;
	int	x;

	x = 0;
	
	p = malloc(sizeof(t_pts) * f->x_lim);
	if (!p || p == NULL)
		return (NULL);
	s = f->raw->segments;
	while (s[x])
	{
		len = get_lmn_len(s[x]);
		p[x].c = extract_color(s[x], ft_abs(len));
		p[x].z = get_height(s[x], ft_abs(len));
		p[x] = proj_offset(p[x], x, y, f);
		// p[x] = proj_offset(p[x], (f->x_lim - 1 - x), y, f);
		// p[x] = proj_offset(p[x], x, (f->y_lim - 1 - y), f);
		x++;
	}
	return (p);
}

void	set_points(t_fdf *f, t_pts **p, t_raw *raw)
{
	while (raw->lines[f->y])
	{
		raw->segments = ft_split(raw->lines[f->y], ' ');
		while (raw->segments[f->x_lim] && f->y == 0)
			f->x_lim++;
		if (f->y == 0)
		{
			f->x_off = DEFWID / 2
		}
		p[f->y] = meta_segments(f, f->y);
		free (raw->segments);
		f->y++;
	}
}
void	init_raw(t_fdf *fdf, char *map_file)
{
	t_raw	raw;
	
	fdf->raw = &raw;
	raw.map = open(map_file, O_RDONLY);
	raw.string = get_next_line(raw.map);
	while (raw.map != -1)
	{
		raw.line = get_next_line(raw.map);
		if (raw.line == NULL)
			break;
		raw.string = ft_strjoin(raw.string, raw.line);
	}
	raw.lines = ft_split(raw.string, '\n');
	while (raw.lines[fdf->y_lim])
		fdf->y_lim++;
	fdf->pts = malloc((sizeof(*fdf->pts) * fdf->y_lim));
	if (!fdf->pts || fdf->pts == NULL)
		exit (0);//TODO:integrate into exit function
	set_points(fdf, fdf->pts, &raw);
}
void	init_fdf(t_fdf *fdf)
{
	fdf->x = 0;
	fdf->y = 0;
	fdf->x_lim = 0;
	fdf->y_lim = 0;
	fdf->e = 0;
	fdf->b = 0;
	fdf->l = 0;
	fdf->t = 0;
	fdf->co = 0;
	fdf->si = 0;
	// fdf->x_off = DEFWID / 2;
	// fdf->y_off = DEFHEI / 2;
	fdf->scale = 1;//NB
	// fdf->angle = ANGLE * (PI/180.0);
	fdf->angle = ANGLE;//NB
	// fdf->max = NULL;
	fdf->raw = NULL;
	// fdf->map = NULL;
	fdf->dim = NULL;
	fdf->mlx = NULL;
	fdf->img = NULL;
	fdf->win = NULL;
	fdf->pts = NULL;
	fdf->pro = NULL;
	fdf->radians = fdf->angle * (PI / 180.0);
	fdf->cosine = cos(fdf->radians);
	fdf->sine = sin(fdf->radians);
	
}
bool	check_file(char **a)
{
	int i;
	int j;

	/* if filename ENDS with .fdf */
	j = ft_strlen(a[1]);
	i = j - 4;
	if (ft_strnstr(a[1] + i, ".fdf", 4))
		return (true);
	return (false);
}
t_mlx	init_mlx(void)
{
	t_mlx	m;

	m.win = NULL;
	m.mlx = NULL;
	m.img = NULL;
	m.adr = NULL;
	m.len = 0;
	m.bpp = 0;
	m.err = 0;
	m.mlx = mlx_init();
	m.win = mlx_new_window(m.mlx, DEFWID, DEFHEI, "Fer De Fil");
	m.img = malloc(sizeof(t_img));
	m.img = mlx_new_image(m.mlx, DEFWID, DEFHEI);
	return (m);
}
int	main(int arg, char **param)
{
	t_fdf	fdf;
	// t_img	*img;

	if (arg != 2 || !check_file(param))
		return (1);
	init_fdf(&fdf);
	init_raw(&fdf, param[1]);
	*fdf.mlx = init_mlx();
	fdf.x = 0;
	fdf.y = 0;
	init_img(&fdf, fdf.img, fdf.pts, fdf.pro);
	mlx_hook(fdf.win, 17, 0, close_handler, &fdf);
	mlx_key_hook(fdf.win, keychain, &fdf);
	mlx_put_image_to_window(fdf.mlx, fdf.win, fdf.img->img, 0, 0);
	mlx_loop(fdf.mlx);
	printf(RED"just follow me\n"DEF);
}
	f->x_off = (DEFWID - ((f->x_lim - f->y_lim) * cos(f->angle) * SCALE)) / 2;
	f->y_off = (DEFHEI - ((f->x_lim + f->y_lim) * sin(f->angle) * SCALE)) / 2;



/*	TODO: 2025.06.02 11:40:41
IT WORKS WITH OTHER MAPS~!!!!!!~!!1!!!!1!!
-	make it center correctly
	-	why isnt it centering?
		-	position is calculated once
		-	jalombar did it twice
			!	try to calc pos/offset twice:
				1.	basic pos
				2.	offset based on pos/zoom
					a.	zoom after offset -> zoom offset
					b.	offset after zoom -> screen based
				3.	updated pos based on offset
-	make colors work
	IT KINDA WORKS WITH COLORRRRRRRR
	-	make it work with gradients of colors?

*/

/* lmeubrin

zooms - calc after screen size comparison

offsets

scale around draw line

*/
/* 	-	make it work with other maps.
-	why isn't it working now?
//(gdb) r test_maps/50-4.fdf 
//Starting program: /home/akjoerse/42/999_GitHub/42006/repo/actual/fdf test_maps/50-4.fdf
//[Thread debugging using libthread_db enabled]
//Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
//^C
//Program received signal SIGINT, Interrupt.
//put_pixel (x=32767, y=-8232, c=0, i=0x7fffffffdf70) at omni.c:47
//47      {

	// so, it goes waaay outta bounds. why?

	// ?	not obeying x-limits?
	// 	!	could set another condition:
	// 		based on `sx/sy`:
	// 			+1	if x0 > x1 -> break
	// 			-1	if x0 < x1 -> break
	// 		++	could make an inbounds function?
	// 			while (inbounds(o, d, var))
					
	// ?	where would it be limited?
 */


// void	set_pro(t_pts o, t_pts d, t_pro *p, int zoom)
// void	set_pro(t_pts o, t_pts d, t_pro *p)


	// p->x0 = round(((o.x)) + f->x_off);
	// p->x0 = round((o.x * f->zoom * SCALEX) + f->x_off);
	// p->x0 = round((o.x * f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x0 = round((o.x / f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x1 = round(d.x + f->x_off);
	// p->x1 = round(((d.x)) + f->x_off);
	// p->x1 = round((d.x * f->zoom * SCALEX) + f->x_off);
	// p->x1 = round((d.x * f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x1 = round((d.x / f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->y0 = round(o.y + f->y_off);
	// p->y0 = round(((o.y)) + f->y_off);
	// p->y0 = round((o.y * f->zoom * SCALEY) + f->y_off);
	// p->y0 = round((o.y * f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y0 = round((o.y / f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y1 = round(d.y + f->y_off);
	// p->y1 = round(((d.y)) + f->y_off);
	// p->y1 = round((d.y * f->zoom * SCALEY) + f->y_off);
	// p->y1 = round((d.y * f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y1 = round((d.y / f->zoom) + ((
		// p->x0 = round(o.x + f->x_off);
	// p->x0 = round(((o.x)) + f->x_off);
	// p->x0 = round((o.x * f->zoom * SCALEX) + f->x_off);
	// p->x0 = round((o.x * f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x0 = round((o.x / f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x1 = round(d.x + f->x_off);
	// p->x1 = round(((d.x)) + f->x_off);
	// p->x1 = round((d.x * f->zoom * SCALEX) + f->x_off);
	// p->x1 = round((d.x * f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->x1 = round((d.x / f->zoom) + ((DEFWID / 2) + f->x_off));
	// p->y0 = round(o.y + f->y_off);
	// p->y0 = round(((o.y)) + f->y_off);
	// p->y0 = round((o.y * f->zoom * SCALEY) + f->y_off);
	// p->y0 = round((o.y * f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y0 = round((o.y / f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y1 = round(d.y + f->y_off);
	// p->y1 = round(((d.y)) + f->y_off);
	// p->y1 = round((d.y * f->zoom * SCALEY) + f->y_off);
	// p->y1 = round((d.y * f->zoom) + ((DEFHEI / 4) + f->y_off));
	// p->y1 = round((d.y / f->zoom) + ((DEFHEI / 4) + f->y_off));

	/*	NORMALIZING LOGIC

add the smallest limit to all numbers

*/
/*	NORMALIZER

take halfway

start - center limit == center of img. obj.

f->x_range[0]
x_halfrange = (f->x_range[1] + -(f->x_range[0])) / 2
f->y_range[0]
y_halfrange = (f->y_range[1] + -(f->y_range[0])) / 2
f->x_off = DEFWID / 2 - (f->x_range[2] * f->zoom);
f->y_off = DEFHEI / 2 - (f->y_range[2] * f->zoom);

find middle of f->x_range

find middle of f->y_range
 
*/
// void	normalize_pts(t_pts **p, t_fdf *f)

	// int	x_half;
	// double	x_off;
	// int	y_half;
	// double	y_off;
	// int	z_half;

	// x_off = DEFWID * 0.02;
	// y_off = DEFHEI * 0.02;
/*	//decent 3/5
	x_half = ((ft_abs(f->x_range[0]) + ft_abs(f->x_range[1])) / 2);
	y_half = ((ft_abs(f->y_range[0]) + ft_abs(f->y_range[1])) / 2);
	if (f->y_lim > f->x_lim)
	{
		f->x_off = DEFWID * y_off;
		f->y_off = DEFHEI * y_off;
	}
	if (f->x_lim > f->y_lim)
	{
		f->x_off = DEFWID * x_off;
		f->y_off = DEFHEI * x_off;
	} */
/* //promising, around 4/5
	x_half = ((ft_abs(f->x_range[0]) + ft_abs(f->x_range[1])) / 2);
	y_half = ((ft_abs(f->y_range[0]) + ft_abs(f->y_range[1])) / 2);
	if (f->x_lim < f->y_lim)
	{
		f->x_off = DEFWID / (x_half * (f->y_lim - f->x_lim));
		f->y_off = DEFHEI / (y_half);
	}
	if (f->x_lim > f->y_lim)
	{
		f->x_off = DEFWID / (x_half);
		f->y_off = DEFHEI / (y_half * (f->x_lim - f->y_lim));
	} */
	
/*
	if (f->x_lim < f->y_lim)
	{
		f->x_off = DEFWID / 2 - (y_half);
		f->y_off = DEFHEI / 2 - (y_half);
		f->y_off = round(y_buf);
		f->x_off = round(x_buf * (f->y_lim - f->x_lim));
	}
	if (f->x_lim > f->y_lim)
	{
		f->x_off = DEFWID / 2 - (x_half);
		f->y_off = DEFHEI / 2 - (x_half);
		f->x_off = round(x_buf);
		f->y_off = round(y_buf * (f->y_lim - f->x_lim));
	}
*/
	// f->x_off = DEFWID / 2 - (((ft_abs(f->x_range[0]) + ft_abs(f->x_range[1])) / 2));
	// f->y_off = DEFHEI / 2 - (((ft_abs(f->y_range[0]) + ft_abs(f->y_range[1])) / 2));

	//EXPERIMENTAL: changing all points based on range
	// x_half = ((f->x_range[0] - (f->x_range[1])) / 2);
	// x_half = ((f->x_range[1] + -(f->x_range[0])) / 2);
	// y_half = ((f->y_range[0] - (f->y_range[1])) / 2);
	// y_half = ((f->y_range[1] + -(f->y_range[0])) / 2);
	// f->x_off = DEFWID / 2 - (x_half * f->zoom);
	// f->y_off = DEFHEI / 2 - (y_half * f->zoom);
	// f->x_off = DEFWID / 2 - (x_half * f->zoom);
	// f->y_off = DEFHEI / 2 - (y_half * f->zoom);
	/* f->y = 0;
	while (f->y < f->y_lim)
	{
		f->x = 0;
		while (f->x < f->x_lim)
		{
			f->pts[f->y][f->x].x += f->x_off;
			// f->pts[f->y][f->x].x += (ft_abs(f->x_range[0]));
			f->pts[f->y][f->x].y += f->y_off;
			// f->pts[f->y][f->x].y += (ft_abs(f->y_range[0]));
			f->x++;
		}
		f->y++;
	} */

	// set_pro(o, d, f->pro, f->zoom);
/*
		off = (DEFWID / f->x_lim) / 2;
		off = (DEFHEI / f->y_lim) / 2;

*/

	/* //	end point/limit
	x_end = (DEFWID - x_buf);
	y_end = (DEFHEI - y_buf);
	//	available screen real estate
	x_realty = x_end - x_buf;
	y_realty = y_end - y_buf; */

	/*	OFFSET LOGIC
we want a buffer from the edge of the screen

//buffer offset, eg. 2% of picture
void	buffer_offset(t_fdf *f)
{
	x_start = (DEFWID * 0.02);
	y_start = (DEFHEI * 0.02);
	

	//	which is higher, x/y//_lim
	if (f->x_lim < f->y_lim)//the y is limiting/the x needs a buff
	{
		x_buf = y_start * (f->y_lim / f->x_lim);
		y_buf = y_start;
	}
	if (f->x_lim > f->y_lim)//the x is limiting/the y needs a buff
	{
		x_buf = x_start;
		y_buf = x_start * (f->x_lim / f->y_lim);
	}
	//	end point/limit
	x_end = (DEFWID - x_buf);
	y_end = (DEFHEI - y_buf);
	//	available screen real estate
	x_realty = x_end - x_buf;
	y_realty = y_end - y_buf;
}




//	the one that is larger = remains at 2%
int	x_buf;
//	the one that is smaller = becomes 2% times the ratio by which it is smaller
int	y_buf;



if x < y
	extra offset based on y
else
	extra offset based on x




*/

