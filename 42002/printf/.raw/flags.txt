# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    flags.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: akjoerse <akjoerse@student.42berlin.de>    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/01 16:10:39 by akjoerse          #+#    #+#              #
#    Updated: 2024/06/05 11:35:00 by akjoerse         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

this file is to explain what the types of flags do in printf.
the flags we care about are:
'-'		'0'		'.'		'#'		' '		'+'
minus	zero	period	hashtag	space	plus

________________________________________________________________________________
bonus 1
Manage any combination of the following flags: ’-0.’ and the field minimum width
under all conversions.
________________________________________________________________________________
what do they do?

'-' 		// minus		//	[JUSTIFICATION]
Left-justify within the given field width;
Right justification is the default (see width sub-specifier).

'0' 		// zero			//	[PADDING]
Left-pads the number with zeroes (0) instead of spaces
when padding is specified (see width sub-specifier).
//OBS//width specifier//OBS//

'.' 		// period		// [PRECISION]

'.number'	// dot-number	// [MINIMUM NUMBER OF SYMBOLS TO WRITE]

[eg: float n=1.230000]	[input: printf("%.2f", n)]	[output: "1.23"]

For integer specifiers (d, i, o, u, x, X): precision specifies the minimum
number of digits to be written. If the value to be written is shorter than
this number, the result is padded with leading zeros. The value is not truncated
even if the result is longer. A precision of 0 means that no character is
written for the value 0.
For a, A, e, E, f and F specifiers: this is the number of digits to be printed
after the decimal point (by default, this is 6).
For g and G specifiers: This is the maximum number of significant digits to be
printed.
For s: this is the maximum number of characters to be printed. By default all
characters are printed until the ending null character is encountered.
If the period is specified without an explicit value for precision,
0 is assumed.

'.*'		// dot star		//	[]
The precision is not specified in the format string, but as
an additional integer value argument preceding the argument
that has to be formatted.
________________________________________________________________________________
bonus 2
Manage all the following flags: ’# +’ (Yes, one of them is a space)
________________________________________________________________________________
what do they do?

'#' 		// hashtag		//
Used with o, x or X specifiers the value is preceeded
with 0, 0x or 0X respectively for values different than zero.
Used with a, A, e, E, f, F, g or G it forces the written output to contain a
decimal point even if no more digits follow. By default,
if no digits follow, no decimal point is written.

' ' 		// space		// [eg: n=3 printf("% d", n)] prints " 3"
If no sign is going to be written, a blank space is inserted before the value.
doesn't work on strings [%s]

'+' 		// plus			//
Forces to preceed the result with a plus or minus sign (+ or -) even for
positive numbers. By default, only negative numbers are preceded with a - sign.
________________________________________________________________________________